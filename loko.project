{
  "name": "license_registration_classification",
  "id": "license_registration_classification",
  "description": "",
  "created_on": "18/04/2023, 14:17:04",
  "last_modify": "19/05/2023, 14:25:50",
  "graphs": {
    "Model Manager": {
      "nodes": [
        {
          "id": "5678d852-2e97-46d3-a09a-0a11886cf7e3",
          "position": {
            "x": 493.6985410230071,
            "y": 554.1231762787589
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 56,
          "selected": false,
          "dragging": false,
          "data": {
            "name": "Trigger",
            "events": null,
            "description": "### Description\nThe TRIGGER component is used to start streams.\n\n### Output\nThe parameter Type can be set as a **String** or an **Object**. The parameter Value, on the other hand, defines the actual output of the component.",
            "inputs": [],
            "outputs": [
              {
                "id": "output",
                "label": "output"
              }
            ],
            "configured": true,
            "options": {
              "group": "Common",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "type",
                  "type": "select",
                  "description": "The type of data",
                  "label": "Type",
                  "validation": {
                    "required": "Required field"
                  },
                  "fragment": null,
                  "advanced": false,
                  "options": [
                    "String",
                    "Object"
                  ],
                  "value": null
                },
                {
                  "name": "value",
                  "type": "dynamic",
                  "dynamicType": {
                    "String": "area",
                    "Object": "code"
                  },
                  "parent": "type",
                  "label": "Value",
                  "validation": {
                    "required": "Required field"
                  }
                }
              ],
              "click": "Send message",
              "icon": "RiPlayFill",
              "values": {
                "type": "String",
                "value": "Hello world!"
              }
            }
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 493.6985410230071,
            "y": 554.1231762787589
          },
          "__class__": "Node"
        },
        {
          "id": "c4898b21-7550-48cd-bc0c-70cbe1a54184",
          "position": {
            "x": 797,
            "y": 620
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 181,
          "height": 60,
          "selected": false,
          "dragging": false,
          "data": {
            "pname": "loko-vision",
            "name": "Vision Manager",
            "events": null,
            "description": "\n### Description\n\nVISION is the Loko AI component which allows to classify images either using a pre-trained Neural Networks, or using a transfer-learning model over one of them. Specifically, VISION helps you with training, predicting and managing your models.\n\n### Configuration\n\nThe heading ***Available services*** allows user to select the VISION instance of interest (remembering that different vision-models will necessarily be found on different instances). \n\nIf you just want to use a pre-trained Neural Network in order to classify your set of images, you can directly link a *File Reader* component to the *Predict* Inputs of VISION. \nMore information about pre-trained models can be found here https://keras.io/api/applications/, where you can see details on their network structure and performances. \nIf you decide to classify your image directly using one of the pre-trained Neural Networks, you should expect to receive as output one of the 1000 possible ImageNet classes.\n\nIf you want to create a transfer-learning model to customize your classifier on your own data, follow these steps:\n\n\n- **Create a model:** in *Create parameters* choose the name of the model you want to create (*Vision Model Name*) and select the pre-trained models to use (*Pretrained Models*). Then, link a *Trigger* component to the **Create** input;\n\n- **Fit a model:** in *Fit parameters* choose the name of the model you want to train (*Vision Model*), and use a *File Reader* to pass a zipped folder to the VISION component ***Fit*** input.\n\n- **Get prediction with a model:** in *Predict parameters* you can set the model to use (*Vision Model*) choosing between the customized models and the pre-trained NN. Then, you can choose if you want to see directly the predicted class or the probability of each of them, setting the **Predict proba** parameters. \nIf you use a customized model, you can also decide to see predictions as a **generic Multi-Class** or as a **Multi-Label model**; in the latter case, if you don't want to see the probability of belonging to each class you can set the value of the **MultiLabel Threshold**, that indicate the minimum probability value in order to assign a specific class.\n\n\nYou may also want to:\n\n\n- **Delete a model:** in the section *delete parameters* specify the model you want to delete. It's possible to delete only the customized models.\n\n- **Get information about a model:** in *info parameters* you have to set the model name and then choose if you just want to know if the model is fitted and the pre-trained model used, or if you want **advanced** information.\n\n\n\n\n### Output\n\nFor **Create, Fit and Delete** services the output messages will only be a sentence that confirms that the required action has been finalized. For the *fit* service it may take a while to have the output back, depending on how much the fitting lasts.\n\n\nThe output for the **info** services change if the model has already been fitted or not, and based on the setting chosen regarding advanced information. In case the model has been fitted and advanced information was activated the output will be the following:\n\n```json\n{\"predictor_name\": name of the model chosen, \n\"pretrained_model\": name of the pretrained model chosen,\n\"top_layer\": {\"n_layer\":1,\n    \"n_classes\": number of classes,\n    \"metrics\": [\"accuracy\"],\n    \"loss_function\": \"binary_crossentropy\",\n    \"epochs\":100},\n\"fitted\": say if the model was trained or not}\n```\n\nIn case the model *is not fitted* or *the advanced information* is not activated, the output will be the same without the \"top layer\" information.\n\nThe **predict** service has different output based on the settings chosen. If the field *predict proba* has been selected, we can see the probabilities next to each labels:\n\n```json\n{\"fname\": name of the file used for the prediction, \n\"pred\": [[\"cat\",0.9996217489242554],\n        [\"dog\",0.001642674207687378]]}\n```\n\nOtherwise, the output will be:\n\n```json\n{\"fname\": name of the file used for the prediction, \n\"pred\": \"cat\"}\n```\n\nIf *multilabel* is selected the output will be:\n\n```\n{\"fname\": name of the file used for the prediction, \n\"pred\": [\"cat\", \"persian\",\"black\"]}\n```\n",
            "inputs": [
              {
                "id": "create",
                "label": "create",
                "service": "loko-services/create",
                "to": "create",
                "closed": false
              },
              {
                "id": "info",
                "label": "info",
                "service": "loko-services/info",
                "to": "info"
              },
              {
                "id": "delete",
                "label": "delete",
                "service": "loko-services/delete",
                "to": "delete",
                "closed": false
              }
            ],
            "outputs": [
              {
                "id": "create",
                "label": "create"
              },
              {
                "id": "info",
                "label": "info"
              },
              {
                "id": "delete",
                "label": "delete"
              }
            ],
            "configured": true,
            "options": {
              "group": "ComputerVision",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "predictor_name",
                  "type": "text",
                  "label": "Vision Model Name",
                  "helper": "Name of the model you want to use for fitting/predicting",
                  "group": "Create Parameters",
                  "value": null,
                  "description": "",
                  "validation": null
                },
                {
                  "name": "pretrained_model",
                  "type": "asyncSelect",
                  "label": "Pretrained model",
                  "helper": "choose your pretrained NN",
                  "group": "Create Parameters",
                  "value": null,
                  "description": "",
                  "validation": null,
                  "url": "http://localhost:9999/routes/loko-vision/models?model_type=pretrained"
                },
                {
                  "name": "predictor_tag",
                  "type": "text",
                  "label": "Model tag",
                  "helper": "Create a tag that helps you to recognize the aim of the model",
                  "group": "Create Parameters",
                  "value": null,
                  "description": "",
                  "validation": null
                },
                {
                  "name": "predictor_name_info",
                  "type": "asyncSelect",
                  "label": "Vision Model",
                  "helper": "Name of the model you want to know details about",
                  "group": "Info parameters",
                  "value": null,
                  "description": "",
                  "validation": null,
                  "url": "http://localhost:9999/routes/loko-vision/models?info=false&model_type=custom"
                },
                {
                  "name": "adv_info",
                  "type": "boolean",
                  "label": "Advanced information",
                  "helper": "",
                  "group": "Info parameters",
                  "value": null,
                  "description": "",
                  "validation": null
                },
                {
                  "name": "predictor_name_delete",
                  "type": "asyncSelect",
                  "label": "Vision Model",
                  "helper": "Name of the model you want to delete",
                  "group": "Delete parameters",
                  "value": null,
                  "description": "",
                  "validation": null,
                  "url": "http://localhost:9999/routes/loko-vision/models?info=false&model_type=custom"
                }
              ],
              "click": null,
              "icon": "RiSettings5Fill",
              "values": {
                "comment": "",
                "alias": "",
                "debug": true,
                "predictor_name": "license_clf",
                "predictor_tag": "Classify between \"license\" and \"registration\" documents",
                "adv_info": false,
                "pretrained_model": "ResNet50",
                "predictor_name_info": "",
                "predictor_name_delete": "license_clf"
              }
            },
            "locked": null
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 797,
            "y": 620
          },
          "__class__": "Node"
        },
        {
          "id": "9d3dfb36-60a5-4109-91a2-fa71ff560a03",
          "position": {
            "x": 472,
            "y": 694
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 88,
          "selected": false,
          "dragging": false,
          "data": {
            "name": "Trigger",
            "events": null,
            "description": "### Description\nThe TRIGGER component is used to start streams.\n\n### Output\nThe parameter Type can be set as a **String** or an **Object**. The parameter Value, on the other hand, defines the actual output of the component.",
            "inputs": [],
            "outputs": [
              {
                "id": "output",
                "label": "output"
              }
            ],
            "configured": true,
            "options": {
              "group": "Common",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "type",
                  "type": "select",
                  "description": "The type of data",
                  "label": "Type",
                  "validation": {
                    "required": "Required field"
                  },
                  "fragment": null,
                  "advanced": false,
                  "options": [
                    "String",
                    "Object"
                  ],
                  "value": null
                },
                {
                  "name": "value",
                  "type": "dynamic",
                  "dynamicType": {
                    "String": "area",
                    "Object": "code"
                  },
                  "parent": "type",
                  "label": "Value",
                  "validation": {
                    "required": "Required field"
                  }
                }
              ],
              "click": "Send message",
              "icon": "RiPlayFill",
              "values": {
                "type": "String",
                "value": "Hello world!"
              }
            }
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 472,
            "y": 694
          },
          "__class__": "Node"
        }
      ],
      "edges": [
        {
          "id": "reactflow__edge-5678d852-2e97-46d3-a09a-0a11886cf7e3output-c4898b21-7550-48cd-bc0c-70cbe1a54184create",
          "source": "5678d852-2e97-46d3-a09a-0a11886cf7e3",
          "sourceHandle": "output",
          "target": "c4898b21-7550-48cd-bc0c-70cbe1a54184",
          "targetHandle": "create",
          "data": {
            "startColor": "#D770AD",
            "stopColor": "#888"
          },
          "selected": false,
          "dragging": false,
          "__class__": "Edge"
        },
        {
          "id": "reactflow__edge-9d3dfb36-60a5-4109-91a2-fa71ff560a03output-c4898b21-7550-48cd-bc0c-70cbe1a54184delete",
          "source": "9d3dfb36-60a5-4109-91a2-fa71ff560a03",
          "sourceHandle": "output",
          "target": "c4898b21-7550-48cd-bc0c-70cbe1a54184",
          "targetHandle": "delete",
          "data": {
            "startColor": "#D770AD",
            "stopColor": "#888"
          },
          "selected": false,
          "dragging": false,
          "__class__": "Edge"
        }
      ],
      "__class__": "Graph"
    },
    "Transfer Learning": {
      "nodes": [
        {
          "id": "9405c588-2dc3-461a-b2a6-3119e5fd6cd0",
          "position": {
            "x": 961,
            "y": 398
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 60,
          "selected": false,
          "dragging": false,
          "data": {
            "pname": "loko-vision",
            "name": "Vision",
            "events": {
              "type": "vision",
              "field": "predictor_name_fit"
            },
            "description": "\n### Description\n\nVISION is the Loko AI component which allows to classify images either using a pre-trained Neural Networks, or using a transfer-learning model over one of them. Specifically, VISION helps you with training, predicting and managing your models.\n\n### Configuration\n\nThe heading ***Available services*** allows user to select the VISION instance of interest (remembering that different vision-models will necessarily be found on different instances). \n\nIf you just want to use a pre-trained Neural Network in order to classify your set of images, you can directly link a *File Reader* component to the *Predict* Inputs of VISION. \nMore information about pre-trained models can be found here https://keras.io/api/applications/, where you can see details on their network structure and performances. \nIf you decide to classify your image directly using one of the pre-trained Neural Networks, you should expect to receive as output one of the 1000 possible ImageNet classes.\n\nIf you want to create a transfer-learning model to customize your classifier on your own data, follow these steps:\n\n\n- **Create a model:** in *Create parameters* choose the name of the model you want to create (*Vision Model Name*) and select the pre-trained models to use (*Pretrained Models*). Then, link a *Trigger* component to the **Create** input;\n\n- **Fit a model:** in *Fit parameters* choose the name of the model you want to train (*Vision Model*), and use a *File Reader* to pass a zipped folder to the VISION component ***Fit*** input.\n\n- **Get prediction with a model:** in *Predict parameters* you can set the model to use (*Vision Model*) choosing between the customized models and the pre-trained NN. Then, you can choose if you want to see directly the predicted class or the probability of each of them, setting the **Predict proba** parameters. \nIf you use a customized model, you can also decide to see predictions as a **generic Multi-Class** or as a **Multi-Label model**; in the latter case, if you don't want to see the probability of belonging to each class you can set the value of the **MultiLabel Threshold**, that indicate the minimum probability value in order to assign a specific class.\n\n\nYou may also want to:\n\n\n- **Delete a model:** in the section *delete parameters* specify the model you want to delete. It's possible to delete only the customized models.\n\n- **Get information about a model:** in *info parameters* you have to set the model name and then choose if you just want to know if the model is fitted and the pre-trained model used, or if you want **advanced** information.\n\n\n\n\n### Output\n\nFor **Create, Fit and Delete** services the output messages will only be a sentence that confirms that the required action has been finalized. For the *fit* service it may take a while to have the output back, depending on how much the fitting lasts.\n\n\nThe output for the **info** services change if the model has already been fitted or not, and based on the setting chosen regarding advanced information. In case the model has been fitted and advanced information was activated the output will be the following:\n\n```json\n{\"predictor_name\": name of the model chosen, \n\"pretrained_model\": name of the pretrained model chosen,\n\"top_layer\": {\"n_layer\":1,\n    \"n_classes\": number of classes,\n    \"metrics\": [\"accuracy\"],\n    \"loss_function\": \"binary_crossentropy\",\n    \"epochs\":100},\n\"fitted\": say if the model was trained or not}\n```\n\nIn case the model *is not fitted* or *the advanced information* is not activated, the output will be the same without the \"top layer\" information.\n\nThe **predict** service has different output based on the settings chosen. If the field *predict proba* has been selected, we can see the probabilities next to each labels:\n\n```json\n{\"fname\": name of the file used for the prediction, \n\"pred\": [[\"cat\",0.9996217489242554],\n        [\"dog\",0.001642674207687378]]}\n```\n\nOtherwise, the output will be:\n\n```json\n{\"fname\": name of the file used for the prediction, \n\"pred\": \"cat\"}\n```\n\nIf *multilabel* is selected the output will be:\n\n```\n{\"fname\": name of the file used for the prediction, \n\"pred\": [\"cat\", \"persian\",\"black\"]}\n```\n",
            "inputs": [
              {
                "id": "fit",
                "label": "fit",
                "service": "loko-services/fit",
                "to": "fit"
              },
              {
                "id": "predict",
                "label": "predict",
                "service": "loko-services/predict",
                "to": "predict"
              },
              {
                "id": "evaluate",
                "label": "evaluate",
                "service": "loko-services/evaluate",
                "to": "evaluate"
              }
            ],
            "outputs": [
              {
                "id": "fit",
                "label": "fit"
              },
              {
                "id": "predict",
                "label": "predict"
              },
              {
                "id": "evaluate",
                "label": "evaluate"
              }
            ],
            "configured": true,
            "options": {
              "group": "ComputerVision",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "predictor_name_fit",
                  "type": "asyncSelect",
                  "label": "Vision Model",
                  "helper": "Name of the model you want to use for fitting",
                  "group": "Fit parameters",
                  "value": null,
                  "description": "",
                  "validation": null,
                  "url": "http://localhost:9999/routes/loko-vision/models?info=false&model_type=custom"
                },
                {
                  "name": "epochs",
                  "type": "number",
                  "label": "Model epochs",
                  "helper": "",
                  "group": "Fit parameters",
                  "value": 150,
                  "description": "Number of epochs to train the Neural Network",
                  "validation": null
                },
                {
                  "name": "optimizer",
                  "type": "select",
                  "label": "Optimizer",
                  "helper": "",
                  "group": "Fit parameters",
                  "value": "Adam",
                  "description": "Optimizer to use for the Neural Network training",
                  "validation": null,
                  "options": [
                    "SGD",
                    "RMSprop",
                    "Adam",
                    "AdamW",
                    "Adadelta",
                    "Adagrad",
                    "Adamax",
                    "Adafactor",
                    "Nadam",
                    "Ftrl"
                  ]
                },
                {
                  "name": "metrics",
                  "type": "text",
                  "label": "Metrics",
                  "helper": "Insert the name of the metrics, comma separeted. E.g.: accuracy,mse,precision",
                  "group": "Fit parameters",
                  "value": "accuracy, ",
                  "description": "Metrics to compute",
                  "validation": null
                },
                {
                  "name": "predictor_name_predict",
                  "type": "asyncSelect",
                  "label": "Vision Model",
                  "helper": "Name of the model you want to use for predicting",
                  "group": "Predict parameters",
                  "value": null,
                  "description": "",
                  "validation": null,
                  "url": "http://localhost:9999/routes/loko-vision/models"
                },
                {
                  "name": "include_probs",
                  "type": "boolean",
                  "label": "Predict proba",
                  "helper": "",
                  "group": "Predict parameters",
                  "value": false,
                  "description": "",
                  "validation": null
                },
                {
                  "name": "probability_th",
                  "type": "dynamic",
                  "label": "Probability Threshold",
                  "helper": "Set this value to 0.0 if you want to have all the model's classes",
                  "group": "Predict parameters",
                  "value": 0.01,
                  "description": "The probability threshold level represents the miminum probability that a class needs to have in order to be \"shown\" in the results",
                  "validation": null,
                  "parent": "include_probs",
                  "condition": "{parent}===true",
                  "dynamicType": "number",
                  "options": null,
                  "fields": null,
                  "url": null
                },
                {
                  "name": "multilabel",
                  "type": "boolean",
                  "label": "Multilabel",
                  "helper": "",
                  "group": "Predict parameters",
                  "value": false,
                  "description": "If True the results will be seen as a MultiLabel problem, otherwise as a MultiClass",
                  "validation": null
                },
                {
                  "name": "multilabel_threshold",
                  "type": "dynamic",
                  "label": "Multilabel Threshold",
                  "helper": "Threshold rate to decide the belongings to one class for the MultiLabel",
                  "group": "Predict parameters",
                  "value": "0.5",
                  "description": "",
                  "validation": null,
                  "parent": "multilabel",
                  "condition": "{parent}===true",
                  "dynamicType": "select",
                  "options": [
                    "0.5",
                    "0.6",
                    "0.7",
                    "0.8",
                    "0.9"
                  ],
                  "fields": null,
                  "url": null
                },
                {
                  "name": "predictor_name_eval",
                  "type": "asyncSelect",
                  "label": "Vision Model",
                  "helper": "Name of the model you want to evaluate",
                  "group": "Evaluate Parameters",
                  "value": null,
                  "description": "",
                  "validation": null,
                  "url": "http://localhost:9999/routes/loko-vision/models?info=false&model_type=custom"
                }
              ],
              "click": null,
              "icon": "RiImage2Fill",
              "values": {
                "comment": "",
                "alias": "",
                "debug": true,
                "epochs": "250",
                "optimizer": "Adam",
                "metrics": "accuracy, ",
                "include_probs": false,
                "multilabel": false,
                "predictor_name_fit": "license_clf",
                "predictor_name_predict": "",
                "predictor_name_eval": ""
              }
            },
            "status": "Training end in 2.657s - 250 epochs runned",
            "locked": null
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 961,
            "y": 398
          },
          "__class__": "Node"
        },
        {
          "id": "adf4f1ad-f8a7-41db-835b-7671960c4636",
          "position": {
            "x": 649,
            "y": 401
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 156,
          "height": 88,
          "selected": false,
          "dragging": false,
          "data": {
            "name": "File Reader",
            "events": null,
            "description": "### Description\nThe FILE READER component allows the reading of individual files.\n\n### Output\nSetting the **Read Content** parameter to **False**, the output provides the file path in PosixPath format. The component will then need to be connected to other components to read the content, for example *LineReader*.\n\nOn the contrary, setting the **Read Content** parameter to **True**, you can choose whether to read the content in *Binary* format. This format will be selected for reading non-text files.",
            "inputs": [
              {
                "id": "input",
                "label": "input"
              }
            ],
            "outputs": [
              {
                "id": "output",
                "label": "output"
              }
            ],
            "configured": true,
            "options": {
              "group": "Inputs",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "value",
                  "type": "files",
                  "label": "File",
                  "fragment": "files",
                  "validation": {
                    "required": "Required field"
                  }
                },
                {
                  "name": "read_content",
                  "type": "boolean",
                  "label": "Read content"
                },
                {
                  "name": "binary",
                  "type": "dynamic",
                  "label": "Binary",
                  "dynamicType": {
                    "true": "boolean"
                  },
                  "parent": "read_content"
                }
              ],
              "click": "Send file",
              "icon": "RiFileList3Fill",
              "values": {
                "comment": "",
                "alias": "",
                "debug": false,
                "read_content": false,
                "value": {
                  "name": "license_dataset.zip",
                  "path": "data/projects/license_registration_classification/data/license_dataset.zip",
                  "parent": "data/projects/license_registration_classification/data",
                  "isDir": false,
                  "hidden": false
                }
              }
            },
            "locked": null
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 649,
            "y": 401
          },
          "__class__": "Node"
        },
        {
          "id": "10486d0d-e7dd-4d1a-a6c6-5e985982e54a",
          "position": {
            "x": 609.9781883364751,
            "y": 346.3738260037702
          },
          "type": "comment",
          "dragHandle": "#commentHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 582,
          "height": 176,
          "selected": false,
          "dragging": false,
          "data": {
            "comment": "Model Training",
            "fill": "#277DA1",
            "height": 176,
            "width": 582
          },
          "zIndex": -1,
          "selectable": false,
          "connectable": false,
          "positionAbsolute": {
            "x": 609.9781883364751,
            "y": 346.3738260037702
          },
          "__class__": "Node"
        },
        {
          "id": "5eaf7863-861a-42b5-86f1-b639d2fbd76a",
          "position": {
            "x": 942.429896279156,
            "y": 659.1934501402064
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 56,
          "selected": false,
          "dragging": false,
          "data": {
            "pname": "loko-vision",
            "name": "Vision",
            "events": {
              "type": "vision",
              "field": "predictor_name_fit"
            },
            "description": "\n### Description\n\nVISION is the Loko AI component which allows to classify images either using a pre-trained Neural Networks, or using a transfer-learning model over one of them. Specifically, VISION helps you with training, predicting and managing your models.\n\n### Configuration\n\nThe heading ***Available services*** allows user to select the VISION instance of interest (remembering that different vision-models will necessarily be found on different instances). \n\nIf you just want to use a pre-trained Neural Network in order to classify your set of images, you can directly link a *File Reader* component to the *Predict* Inputs of VISION. \nMore information about pre-trained models can be found here https://keras.io/api/applications/, where you can see details on their network structure and performances. \nIf you decide to classify your image directly using one of the pre-trained Neural Networks, you should expect to receive as output one of the 1000 possible ImageNet classes.\n\nIf you want to create a transfer-learning model to customize your classifier on your own data, follow these steps:\n\n\n- **Create a model:** in *Create parameters* choose the name of the model you want to create (*Vision Model Name*) and select the pre-trained models to use (*Pretrained Models*). Then, link a *Trigger* component to the **Create** input;\n\n- **Fit a model:** in *Fit parameters* choose the name of the model you want to train (*Vision Model*), and use a *File Reader* to pass a zipped folder to the VISION component ***Fit*** input.\n\n- **Get prediction with a model:** in *Predict parameters* you can set the model to use (*Vision Model*) choosing between the customized models and the pre-trained NN. Then, you can choose if you want to see directly the predicted class or the probability of each of them, setting the **Predict proba** parameters. \nIf you use a customized model, you can also decide to see predictions as a **generic Multi-Class** or as a **Multi-Label model**; in the latter case, if you don't want to see the probability of belonging to each class you can set the value of the **MultiLabel Threshold**, that indicate the minimum probability value in order to assign a specific class.\n\n\nYou may also want to:\n\n\n- **Delete a model:** in the section *delete parameters* specify the model you want to delete. It's possible to delete only the customized models.\n\n- **Get information about a model:** in *info parameters* you have to set the model name and then choose if you just want to know if the model is fitted and the pre-trained model used, or if you want **advanced** information.\n\n\n\n\n### Output\n\nFor **Create, Fit and Delete** services the output messages will only be a sentence that confirms that the required action has been finalized. For the *fit* service it may take a while to have the output back, depending on how much the fitting lasts.\n\n\nThe output for the **info** services change if the model has already been fitted or not, and based on the setting chosen regarding advanced information. In case the model has been fitted and advanced information was activated the output will be the following:\n\n```json\n{\"predictor_name\": name of the model chosen, \n\"pretrained_model\": name of the pretrained model chosen,\n\"top_layer\": {\"n_layer\":1,\n    \"n_classes\": number of classes,\n    \"metrics\": [\"accuracy\"],\n    \"loss_function\": \"binary_crossentropy\",\n    \"epochs\":100},\n\"fitted\": say if the model was trained or not}\n```\n\nIn case the model *is not fitted* or *the advanced information* is not activated, the output will be the same without the \"top layer\" information.\n\nThe **predict** service has different output based on the settings chosen. If the field *predict proba* has been selected, we can see the probabilities next to each labels:\n\n```json\n{\"fname\": name of the file used for the prediction, \n\"pred\": [[\"cat\",0.9996217489242554],\n        [\"dog\",0.001642674207687378]]}\n```\n\nOtherwise, the output will be:\n\n```json\n{\"fname\": name of the file used for the prediction, \n\"pred\": \"cat\"}\n```\n\nIf *multilabel* is selected the output will be:\n\n```\n{\"fname\": name of the file used for the prediction, \n\"pred\": [\"cat\", \"persian\",\"black\"]}\n```\n",
            "inputs": [
              {
                "id": "fit",
                "label": "fit",
                "service": "loko-services/fit",
                "to": "fit"
              },
              {
                "id": "predict",
                "label": "predict",
                "service": "loko-services/predict",
                "to": "predict"
              },
              {
                "id": "evaluate",
                "label": "evaluate",
                "service": "loko-services/evaluate",
                "to": "evaluate"
              }
            ],
            "outputs": [
              {
                "id": "fit",
                "label": "fit"
              },
              {
                "id": "predict",
                "label": "predict"
              },
              {
                "id": "evaluate",
                "label": "evaluate"
              }
            ],
            "configured": true,
            "options": {
              "group": "ComputerVision",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "predictor_name_fit",
                  "type": "asyncSelect",
                  "label": "Vision Model",
                  "helper": "Name of the model you want to use for fitting",
                  "group": "Fit parameters",
                  "value": null,
                  "description": "",
                  "validation": null,
                  "url": "http://localhost:9999/routes/loko-vision/models?info=false&model_type=custom"
                },
                {
                  "name": "epochs",
                  "type": "number",
                  "label": "Model epochs",
                  "helper": "",
                  "group": "Fit parameters",
                  "value": 150,
                  "description": "Number of epochs to train the Neural Network",
                  "validation": null
                },
                {
                  "name": "optimizer",
                  "type": "select",
                  "label": "Optimizer",
                  "helper": "",
                  "group": "Fit parameters",
                  "value": "Adam",
                  "description": "Optimizer to use for the Neural Network training",
                  "validation": null,
                  "options": [
                    "SGD",
                    "RMSprop",
                    "Adam",
                    "AdamW",
                    "Adadelta",
                    "Adagrad",
                    "Adamax",
                    "Adafactor",
                    "Nadam",
                    "Ftrl"
                  ]
                },
                {
                  "name": "metrics",
                  "type": "text",
                  "label": "Metrics",
                  "helper": "Insert the name of the metrics, comma separeted. E.g.: accuracy,mse,precision",
                  "group": "Fit parameters",
                  "value": "accuracy, ",
                  "description": "Metrics to compute",
                  "validation": null
                },
                {
                  "name": "predictor_name_predict",
                  "type": "asyncSelect",
                  "label": "Vision Model",
                  "helper": "Name of the model you want to use for predicting",
                  "group": "Predict parameters",
                  "value": null,
                  "description": "",
                  "validation": null,
                  "url": "http://localhost:9999/routes/loko-vision/models"
                },
                {
                  "name": "include_probs",
                  "type": "boolean",
                  "label": "Predict proba",
                  "helper": "",
                  "group": "Predict parameters",
                  "value": false,
                  "description": "",
                  "validation": null
                },
                {
                  "name": "probability_th",
                  "type": "dynamic",
                  "label": "Probability Threshold",
                  "helper": "Set this value to 0.0 if you want to have all the model's classes",
                  "group": "Predict parameters",
                  "value": 0.01,
                  "description": "The probability threshold level represents the miminum probability that a class needs to have in order to be \"shown\" in the results",
                  "validation": null,
                  "parent": "include_probs",
                  "condition": "{parent}===true",
                  "dynamicType": "number",
                  "options": null,
                  "fields": null,
                  "url": null
                },
                {
                  "name": "multilabel",
                  "type": "boolean",
                  "label": "Multilabel",
                  "helper": "",
                  "group": "Predict parameters",
                  "value": false,
                  "description": "If True the results will be seen as a MultiLabel problem, otherwise as a MultiClass",
                  "validation": null
                },
                {
                  "name": "multilabel_threshold",
                  "type": "dynamic",
                  "label": "Multilabel Threshold",
                  "helper": "Threshold rate to decide the belongings to one class for the MultiLabel",
                  "group": "Predict parameters",
                  "value": "0.5",
                  "description": "",
                  "validation": null,
                  "parent": "multilabel",
                  "condition": "{parent}===true",
                  "dynamicType": "select",
                  "options": [
                    "0.5",
                    "0.6",
                    "0.7",
                    "0.8",
                    "0.9"
                  ],
                  "fields": null,
                  "url": null
                },
                {
                  "name": "predictor_name_eval",
                  "type": "asyncSelect",
                  "label": "Vision Model",
                  "helper": "Name of the model you want to evaluate",
                  "group": "Evaluate Parameters",
                  "value": null,
                  "description": "",
                  "validation": null,
                  "url": "http://localhost:9999/routes/loko-vision/models?info=false&model_type=custom"
                }
              ],
              "click": null,
              "icon": "RiImage2Fill",
              "values": {
                "comment": "",
                "alias": "",
                "debug": true,
                "epochs": "150",
                "optimizer": "Adam",
                "metrics": "accuracy, ",
                "include_probs": false,
                "multilabel": false,
                "predictor_name_fit": "",
                "predictor_name_eval": "license_clf",
                "predictor_name_predict": ""
              }
            },
            "locked": null
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 942.429896279156,
            "y": 659.1934501402064
          },
          "__class__": "Node"
        },
        {
          "id": "ee4ce8fd-4960-4a58-83bf-f2019a0d5870",
          "position": {
            "x": 622.7410817694347,
            "y": 676.567842233126
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 56,
          "selected": false,
          "dragging": false,
          "data": {
            "name": "File Reader",
            "events": null,
            "description": "### Description\nThe FILE READER component allows the reading of individual files.\n\n### Output\nSetting the **Read Content** parameter to **False**, the output provides the file path in PosixPath format. The component will then need to be connected to other components to read the content, for example *LineReader*.\n\nOn the contrary, setting the **Read Content** parameter to **True**, you can choose whether to read the content in *Binary* format. This format will be selected for reading non-text files.",
            "inputs": [
              {
                "id": "input",
                "label": "input"
              }
            ],
            "outputs": [
              {
                "id": "output",
                "label": "output"
              }
            ],
            "configured": true,
            "options": {
              "group": "Inputs",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "value",
                  "type": "files",
                  "label": "File",
                  "fragment": "files",
                  "validation": {
                    "required": "Required field"
                  }
                },
                {
                  "name": "read_content",
                  "type": "boolean",
                  "label": "Read content"
                },
                {
                  "name": "binary",
                  "type": "dynamic",
                  "label": "Binary",
                  "dynamicType": {
                    "true": "boolean"
                  },
                  "parent": "read_content"
                }
              ],
              "click": "Send file",
              "icon": "RiFileList3Fill",
              "values": {
                "comment": "",
                "alias": "",
                "debug": false,
                "read_content": false,
                "value": {
                  "name": "license_dataset.zip",
                  "path": "data/projects/license_registration_classification/data/license_dataset.zip",
                  "parent": "data/projects/license_registration_classification/data",
                  "isDir": false,
                  "hidden": false
                }
              }
            },
            "locked": null
          },
          "selectable": true,
          "draggable": true,
          "__class__": "Node"
        },
        {
          "id": "69f2ffce-20b4-48ae-93f6-ceb575d560d3",
          "position": {
            "x": 1228.5282194092329,
            "y": 656.7185717216225
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 56,
          "selected": false,
          "dragging": false,
          "data": {
            "name": "File Writer",
            "events": null,
            "description": "### Description\nThe FILE WRITER component allows you to write files. The **Append** parameter allows you to write a file using multiple inputs. The destination path of the file can be defined when creating the block or passed as input in the previous block. In this way you have the possibility to write multiple files using one block.\n\n### Input\nUsing the parameter **Save as**, the format of the data to be received as input is defined. The available formats are: *text*, *bytes* and *json*. To define the destination path of the file instead, the input is defined as:\n```python\nParameters(data = data, path = filename)\n```\n\n### Output\nThe output confirms that the file has been written with the string: **Written to filename**.",
            "inputs": [
              {
                "id": "input",
                "label": "input"
              }
            ],
            "outputs": [
              {
                "id": "output",
                "label": "output"
              }
            ],
            "configured": true,
            "options": {
              "group": "Outputs",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "path",
                  "type": "text",
                  "label": "Path"
                },
                {
                  "name": "type",
                  "label": "Save as",
                  "type": "select",
                  "options": [
                    "text",
                    "bytes",
                    "json"
                  ],
                  "validation": {
                    "required": "Required field"
                  }
                },
                {
                  "name": "append",
                  "label": "Append",
                  "type": "dynamic",
                  "dynamicType": "boolean",
                  "condition": "[\"text\", \"bytes\"].includes({parent})",
                  "parent": "type"
                },
                {
                  "name": "overwrite",
                  "type": "dynamic",
                  "dynamicType": {
                    "true": "boolean"
                  },
                  "parent": "append",
                  "label": "Overwrite"
                }
              ],
              "click": null,
              "icon": "RiFileEditFill",
              "values": {
                "comment": "",
                "alias": "",
                "debug": true,
                "path": "data/data/license_eval_report.eval",
                "type": "json"
              }
            },
            "locked": null
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 1228.5282194092329,
            "y": 656.7185717216225
          },
          "__class__": "Node"
        },
        {
          "id": "219f416a-0254-4125-b0bf-388cec0f20a4",
          "position": {
            "x": 582.7410817694347,
            "y": 584.3107522932677
          },
          "type": "comment",
          "dragHandle": "#commentHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 862.7871376397982,
          "height": 234,
          "selected": false,
          "dragging": false,
          "data": {
            "comment": "Evaluate Model",
            "fill": "#90BE6D",
            "height": 234,
            "width": 862.7871376397982
          },
          "zIndex": -1,
          "selectable": false,
          "connectable": false,
          "positionAbsolute": {
            "x": 582.7410817694347,
            "y": 584.3107522932677
          },
          "__class__": "Node"
        }
      ],
      "edges": [
        {
          "id": "reactflow__edge-adf4f1ad-f8a7-41db-835b-7671960c4636output-9405c588-2dc3-461a-b2a6-3119e5fd6cd0fit",
          "source": "adf4f1ad-f8a7-41db-835b-7671960c4636",
          "sourceHandle": "output",
          "target": "9405c588-2dc3-461a-b2a6-3119e5fd6cd0",
          "targetHandle": "fit",
          "data": {
            "startColor": "#F8637A",
            "stopColor": "#888"
          },
          "selected": false,
          "dragging": false,
          "__class__": "Edge"
        },
        {
          "id": "reactflow__edge-ee4ce8fd-4960-4a58-83bf-f2019a0d5870output-5eaf7863-861a-42b5-86f1-b639d2fbd76aevaluate",
          "source": "ee4ce8fd-4960-4a58-83bf-f2019a0d5870",
          "sourceHandle": "output",
          "target": "5eaf7863-861a-42b5-86f1-b639d2fbd76a",
          "targetHandle": "evaluate",
          "data": {
            "startColor": "#F8637A",
            "stopColor": "#888"
          },
          "selected": false,
          "dragging": false,
          "__class__": "Edge"
        },
        {
          "id": "reactflow__edge-5eaf7863-861a-42b5-86f1-b639d2fbd76aevaluate-69f2ffce-20b4-48ae-93f6-ceb575d560d3input",
          "source": "5eaf7863-861a-42b5-86f1-b639d2fbd76a",
          "sourceHandle": "evaluate",
          "target": "69f2ffce-20b4-48ae-93f6-ceb575d560d3",
          "targetHandle": "input",
          "data": {
            "startColor": "#888",
            "stopColor": "#56DCB9"
          },
          "selected": false,
          "dragging": false,
          "__class__": "Edge"
        }
      ],
      "__class__": "Graph"
    },
    "Predict Service": {
      "nodes": [
        {
          "id": "ffbd84ce-31ce-4aab-b743-3d20b64ecd56",
          "position": {
            "x": 531.8534335420454,
            "y": 230.14691382115922
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 56,
          "selected": false,
          "dragging": false,
          "data": {
            "name": "Route",
            "events": null,
            "description": "### Description\nThe ROUTE component is used to create a web server listening on a specific address and a specific HTTP method.\n\n### Input\nThe component has no input.\n\n### Output\nIn this case there is no fixed output format.",
            "inputs": [],
            "outputs": [
              {
                "id": "output",
                "label": "output"
              }
            ],
            "configured": true,
            "options": {
              "group": "HTTP",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "path",
                  "type": "path",
                  "helper": "Insert a path without '/' at start"
                }
              ],
              "click": null,
              "icon": "RiCloudyFill",
              "values": {
                "comment": "",
                "alias": "",
                "debug": false,
                "path": "predict"
              }
            },
            "locked": null
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 531.8534335420454,
            "y": 230.14691382115922
          },
          "__class__": "Node"
        },
        {
          "id": "9d5e48fc-b0f4-4aed-91e3-31324b2e3296",
          "position": {
            "x": 1340.7398035828253,
            "y": 224.24660119427506
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 56,
          "selected": false,
          "dragging": false,
          "data": {
            "name": "Response",
            "events": null,
            "description": "### Description\nThe RESPONSE component is used to set the type of response output that should be sent upon receipt of an HTTP request captured by a **Route** component.\n\n### Input\nIn this case there is no fixed input format.\n\n### Output\nThe component has no output.",
            "inputs": [
              {
                "id": "input",
                "label": "input"
              }
            ],
            "outputs": [],
            "configured": true,
            "options": {
              "group": "HTTP",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "type",
                  "type": "select",
                  "options": [
                    "html",
                    "json"
                  ],
                  "label": "Response Type",
                  "validation": {
                    "required": "Required field"
                  }
                }
              ],
              "click": null,
              "icon": "RiDownloadCloud2Fill",
              "values": {
                "comment": "",
                "alias": "",
                "debug": false,
                "type": "json"
              }
            },
            "locked": null
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 1340.7398035828253,
            "y": 224.24660119427506
          },
          "__class__": "Node"
        },
        {
          "id": "da97555a-5f26-4666-b1c9-c91b6dc779e0",
          "position": {
            "x": 786.1132093358142,
            "y": 228
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 56,
          "selected": false,
          "dragging": false,
          "data": {
            "name": "Function",
            "events": null,
            "description": "### Description\nThe FUNCTION component is used to apply Python code to the input component's. The input can be retrieved using the variable *data*.\n\nTo be able to use data from components of type FUNCTION that are not linked together, the object is set repository.\n\n```python\nrepository.set('value', 5) - this sets the variable value to 5.\nrepository.get('value') - in this way the variable is called value and the value 5 is returned.\n```\n\n### Input\nThe input is used by the component using the variable **data**.\n\n### Output\nThe output coincides with the return of the code defined when the component was created.",
            "inputs": [
              {
                "id": "input",
                "label": "input"
              }
            ],
            "outputs": [
              {
                "id": "output",
                "label": "output"
              }
            ],
            "configured": true,
            "options": {
              "group": "Common",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "propagate",
                  "type": "boolean",
                  "label": "Flush at the end"
                },
                {
                  "name": "notify_warnings",
                  "type": "boolean",
                  "label": "Notify warnings"
                },
                {
                  "name": "code",
                  "type": "code",
                  "description": "A python function that processes the incoming message. \nVariables available are:\n- **data**: the incoming message\n",
                  "label": "Code",
                  "validation": {
                    "required": "Required field"
                  },
                  "fragment": null,
                  "advanced": false,
                  "options": null,
                  "value": null
                }
              ],
              "click": null,
              "icon": "RiCodeSSlashFill",
              "values": {
                "comment": "",
                "alias": "",
                "debug": false,
                "propagate": true,
                "notify_warnings": true,
                "code": "return data.files.get(\"file\")"
              }
            },
            "locked": null
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 786.1132093358142,
            "y": 228
          },
          "__class__": "Node"
        },
        {
          "id": "c914dea6-f95b-4039-8da7-4ef0ea1e94b5",
          "position": {
            "x": 920.8776512036094,
            "y": 523.117462481694
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 56,
          "selected": false,
          "dragging": false,
          "data": {
            "name": "HTTP Request",
            "events": null,
            "description": "### Description\nThe HTTP REQUEST component is used to make HTTP requests in the web to microservices external to the LOKO AI platform.\n\n### Input\nInput is only required for HTTP methods that have or require a body (PUT/PATCH/POST). In this case there is no predefined input format.\n\n### Output\nIn this case there is no fixed output format.",
            "inputs": [
              {
                "id": "input",
                "label": "input",
                "closed": false
              }
            ],
            "outputs": [
              {
                "id": "output",
                "label": "output"
              }
            ],
            "configured": true,
            "options": {
              "group": "HTTP",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "type": "text",
                  "name": "url",
                  "label": "URL",
                  "validation": {
                    "required": "Required field"
                  }
                },
                {
                  "name": "method",
                  "label": "Method",
                  "type": "select",
                  "options": [
                    "GET",
                    "POST",
                    "PUT",
                    "DELETE",
                    "PATCH"
                  ],
                  "validation": {
                    "required": "Required field"
                  }
                },
                {
                  "name": "accept",
                  "label": "Accept",
                  "type": "select",
                  "options": [
                    "text",
                    "json",
                    "file"
                  ],
                  "validation": {
                    "required": "Required field"
                  }
                },
                {
                  "name": "query",
                  "label": "Query params",
                  "type": "multiKeyValue",
                  "fields": [
                    {
                      "name": "key",
                      "placeholder": "Key",
                      "validation": {
                        "required": "Required field"
                      }
                    },
                    {
                      "name": "value",
                      "placeholder": "Value",
                      "validation": {
                        "required": "Required field"
                      }
                    }
                  ]
                }
              ],
              "click": "Launch request",
              "icon": "RiUploadCloud2Fill",
              "values": {
                "comment": "",
                "alias": "",
                "debug": true,
                "url": "http://gateway:8080/routes/orchestrator/endpoints/license_registration_classification/predict",
                "method": "POST",
                "accept": "json"
              }
            }
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 920.8776512036094,
            "y": 523.117462481694
          },
          "__class__": "Node"
        },
        {
          "id": "a1305ebc-5cff-4ea2-a1e2-e38cf3aa8f31",
          "position": {
            "x": 616.0524351984532,
            "y": 528.5676224029219
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 156,
          "height": 88,
          "selected": false,
          "dragging": false,
          "data": {
            "name": "File Reader",
            "events": null,
            "description": "### Description\nThe FILE READER component allows the reading of individual files.\n\n### Output\nSetting the **Read Content** parameter to **False**, the output provides the file path in PosixPath format. The component will then need to be connected to other components to read the content, for example *LineReader*.\n\nOn the contrary, setting the **Read Content** parameter to **True**, you can choose whether to read the content in *Binary* format. This format will be selected for reading non-text files.",
            "inputs": [
              {
                "id": "input",
                "label": "input"
              }
            ],
            "outputs": [
              {
                "id": "output",
                "label": "output"
              }
            ],
            "configured": true,
            "options": {
              "group": "Inputs",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "value",
                  "type": "files",
                  "label": "File",
                  "fragment": "files",
                  "validation": {
                    "required": "Required field"
                  }
                },
                {
                  "name": "read_content",
                  "type": "boolean",
                  "label": "Read content"
                },
                {
                  "name": "binary",
                  "type": "dynamic",
                  "label": "Binary",
                  "dynamicType": {
                    "true": "boolean"
                  },
                  "parent": "read_content"
                }
              ],
              "click": "Send file",
              "icon": "RiFileList3Fill",
              "values": {
                "comment": "",
                "alias": "",
                "debug": false,
                "read_content": false,
                "value": {
                  "name": "patente_test.jpg",
                  "path": "data/projects/license_registration_classification/data/patente_test.jpg",
                  "parent": "data/projects/license_registration_classification/data",
                  "isDir": false,
                  "hidden": false
                }
              }
            },
            "locked": null
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 616.0524351984532,
            "y": 528.5676224029219
          },
          "__class__": "Node"
        },
        {
          "id": "b6387c05-c806-47a2-aa8d-05965b611cea",
          "position": {
            "x": 1062.3418887355067,
            "y": 223.3700289908169
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 60,
          "selected": false,
          "dragging": false,
          "data": {
            "pname": "loko-vision",
            "name": "Vision",
            "events": {
              "type": "vision",
              "field": "predictor_name_fit"
            },
            "description": "\n### Description\n\nVISION is the Loko AI component which allows to classify images either using a pre-trained Neural Networks, or using a transfer-learning model over one of them. Specifically, VISION helps you with training, predicting and managing your models.\n\n### Configuration\n\nThe heading ***Available services*** allows user to select the VISION instance of interest (remembering that different vision-models will necessarily be found on different instances). \n\nIf you just want to use a pre-trained Neural Network in order to classify your set of images, you can directly link a *File Reader* component to the *Predict* Inputs of VISION. \nMore information about pre-trained models can be found here https://keras.io/api/applications/, where you can see details on their network structure and performances. \nIf you decide to classify your image directly using one of the pre-trained Neural Networks, you should expect to receive as output one of the 1000 possible ImageNet classes.\n\nIf you want to create a transfer-learning model to customize your classifier on your own data, follow these steps:\n\n\n- **Create a model:** in *Create parameters* choose the name of the model you want to create (*Vision Model Name*) and select the pre-trained models to use (*Pretrained Models*). Then, link a *Trigger* component to the **Create** input;\n\n- **Fit a model:** in *Fit parameters* choose the name of the model you want to train (*Vision Model*), and use a *File Reader* to pass a zipped folder to the VISION component ***Fit*** input.\n\n- **Get prediction with a model:** in *Predict parameters* you can set the model to use (*Vision Model*) choosing between the customized models and the pre-trained NN. Then, you can choose if you want to see directly the predicted class or the probability of each of them, setting the **Predict proba** parameters. \nIf you use a customized model, you can also decide to see predictions as a **generic Multi-Class** or as a **Multi-Label model**; in the latter case, if you don't want to see the probability of belonging to each class you can set the value of the **MultiLabel Threshold**, that indicate the minimum probability value in order to assign a specific class.\n\n\nYou may also want to:\n\n\n- **Delete a model:** in the section *delete parameters* specify the model you want to delete. It's possible to delete only the customized models.\n\n- **Get information about a model:** in *info parameters* you have to set the model name and then choose if you just want to know if the model is fitted and the pre-trained model used, or if you want **advanced** information.\n\n\n\n\n### Output\n\nFor **Create, Fit and Delete** services the output messages will only be a sentence that confirms that the required action has been finalized. For the *fit* service it may take a while to have the output back, depending on how much the fitting lasts.\n\n\nThe output for the **info** services change if the model has already been fitted or not, and based on the setting chosen regarding advanced information. In case the model has been fitted and advanced information was activated the output will be the following:\n\n```json\n{\"predictor_name\": name of the model chosen, \n\"pretrained_model\": name of the pretrained model chosen,\n\"top_layer\": {\"n_layer\":1,\n    \"n_classes\": number of classes,\n    \"metrics\": [\"accuracy\"],\n    \"loss_function\": \"binary_crossentropy\",\n    \"epochs\":100},\n\"fitted\": say if the model was trained or not}\n```\n\nIn case the model *is not fitted* or *the advanced information* is not activated, the output will be the same without the \"top layer\" information.\n\nThe **predict** service has different output based on the settings chosen. If the field *predict proba* has been selected, we can see the probabilities next to each labels:\n\n```json\n{\"fname\": name of the file used for the prediction, \n\"pred\": [[\"cat\",0.9996217489242554],\n        [\"dog\",0.001642674207687378]]}\n```\n\nOtherwise, the output will be:\n\n```json\n{\"fname\": name of the file used for the prediction, \n\"pred\": \"cat\"}\n```\n\nIf *multilabel* is selected the output will be:\n\n```\n{\"fname\": name of the file used for the prediction, \n\"pred\": [\"cat\", \"persian\",\"black\"]}\n```\n",
            "inputs": [
              {
                "id": "fit",
                "label": "fit",
                "service": "loko-services/fit",
                "to": "fit"
              },
              {
                "id": "predict",
                "label": "predict",
                "service": "loko-services/predict",
                "to": "predict"
              },
              {
                "id": "evaluate",
                "label": "evaluate",
                "service": "loko-services/evaluate",
                "to": "evaluate"
              }
            ],
            "outputs": [
              {
                "id": "fit",
                "label": "fit"
              },
              {
                "id": "predict",
                "label": "predict"
              },
              {
                "id": "evaluate",
                "label": "evaluate"
              }
            ],
            "configured": true,
            "options": {
              "group": "ComputerVision",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "predictor_name_fit",
                  "type": "asyncSelect",
                  "label": "Vision Model",
                  "helper": "Name of the model you want to use for fitting",
                  "group": "Fit parameters",
                  "value": null,
                  "description": "",
                  "validation": null,
                  "url": "http://localhost:9999/routes/loko-vision/models?info=false&model_type=custom"
                },
                {
                  "name": "epochs",
                  "type": "number",
                  "label": "Model epochs",
                  "helper": "",
                  "group": "Fit parameters",
                  "value": 150,
                  "description": "Number of epochs to train the Neural Network",
                  "validation": null
                },
                {
                  "name": "optimizer",
                  "type": "select",
                  "label": "Optimizer",
                  "helper": "",
                  "group": "Fit parameters",
                  "value": "Adam",
                  "description": "Optimizer to use for the Neural Network training",
                  "validation": null,
                  "options": [
                    "SGD",
                    "RMSprop",
                    "Adam",
                    "AdamW",
                    "Adadelta",
                    "Adagrad",
                    "Adamax",
                    "Adafactor",
                    "Nadam",
                    "Ftrl"
                  ]
                },
                {
                  "name": "metrics",
                  "type": "text",
                  "label": "Metrics",
                  "helper": "Insert the name of the metrics, comma separeted. E.g.: accuracy,mse,precision",
                  "group": "Fit parameters",
                  "value": "accuracy, ",
                  "description": "Metrics to compute",
                  "validation": null
                },
                {
                  "name": "predictor_name_predict",
                  "type": "asyncSelect",
                  "label": "Vision Model",
                  "helper": "Name of the model you want to use for predicting",
                  "group": "Predict parameters",
                  "value": null,
                  "description": "",
                  "validation": null,
                  "url": "http://localhost:9999/routes/loko-vision/models"
                },
                {
                  "name": "include_probs",
                  "type": "boolean",
                  "label": "Predict proba",
                  "helper": "",
                  "group": "Predict parameters",
                  "value": false,
                  "description": "",
                  "validation": null
                },
                {
                  "name": "probability_th",
                  "type": "dynamic",
                  "label": "Probability Threshold",
                  "helper": "Set this value to 0.0 if you want to have all the model's classes",
                  "group": "Predict parameters",
                  "value": 0.01,
                  "description": "The probability threshold level represents the miminum probability that a class needs to have in order to be \"shown\" in the results",
                  "validation": null,
                  "parent": "include_probs",
                  "condition": "{parent}===true",
                  "dynamicType": "number",
                  "options": null,
                  "fields": null,
                  "url": null
                },
                {
                  "name": "multilabel",
                  "type": "boolean",
                  "label": "Multilabel",
                  "helper": "",
                  "group": "Predict parameters",
                  "value": false,
                  "description": "If True the results will be seen as a MultiLabel problem, otherwise as a MultiClass",
                  "validation": null
                },
                {
                  "name": "multilabel_threshold",
                  "type": "dynamic",
                  "label": "Multilabel Threshold",
                  "helper": "Threshold rate to decide the belongings to one class for the MultiLabel",
                  "group": "Predict parameters",
                  "value": "0.5",
                  "description": "",
                  "validation": null,
                  "parent": "multilabel",
                  "condition": "{parent}===true",
                  "dynamicType": "select",
                  "options": [
                    "0.5",
                    "0.6",
                    "0.7",
                    "0.8",
                    "0.9"
                  ],
                  "fields": null,
                  "url": null
                },
                {
                  "name": "predictor_name_eval",
                  "type": "asyncSelect",
                  "label": "Vision Model",
                  "helper": "Name of the model you want to evaluate",
                  "group": "Evaluate Parameters",
                  "value": null,
                  "description": "",
                  "validation": null,
                  "url": "http://localhost:9999/routes/loko-vision/models?info=false&model_type=custom"
                }
              ],
              "click": null,
              "icon": "RiImage2Fill",
              "values": {
                "comment": "",
                "alias": "",
                "debug": false,
                "epochs": "150",
                "optimizer": "Adam",
                "metrics": "accuracy, ",
                "include_probs": true,
                "multilabel": false,
                "probability_th": "0.0",
                "predictor_name_fit": "",
                "predictor_name_predict": "license_clf",
                "predictor_name_eval": ""
              }
            },
            "locked": null
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 1062.3418887355067,
            "y": 223.3700289908169
          },
          "__class__": "Node"
        },
        {
          "id": "991f2f3b-1e9d-4930-b230-2548167bf63c",
          "position": {
            "x": 493.1000347363205,
            "y": 174.9003126268841
          },
          "type": "comment",
          "dragHandle": "#commentHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 1033.8999652636794,
          "height": 136,
          "selected": false,
          "dragging": false,
          "data": {
            "comment": "Exposing prediction services",
            "fill": "#277DA1",
            "height": 136,
            "width": 1033.8999652636794
          },
          "zIndex": -1,
          "selectable": false,
          "connectable": false,
          "positionAbsolute": {
            "x": 493.1000347363205,
            "y": 174.9003126268841
          },
          "__class__": "Node"
        },
        {
          "id": "c0e0e422-5e63-43e2-b380-74a5118a08e5",
          "position": {
            "x": 583.33865907281,
            "y": 451.19398096261455
          },
          "type": "comment",
          "dragHandle": "#commentHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 568,
          "height": 235,
          "selected": false,
          "dragging": false,
          "data": {
            "comment": "Test the exposed serviced",
            "fill": "#FC8930",
            "height": 235,
            "width": 568
          },
          "zIndex": -1,
          "selectable": false,
          "connectable": false,
          "positionAbsolute": {
            "x": 583.33865907281,
            "y": 451.19398096261455
          },
          "__class__": "Node"
        }
      ],
      "edges": [
        {
          "id": "reactflow__edge-ffbd84ce-31ce-4aab-b743-3d20b64ecd56output-da97555a-5f26-4666-b1c9-c91b6dc779e0input",
          "source": "ffbd84ce-31ce-4aab-b743-3d20b64ecd56",
          "sourceHandle": "output",
          "target": "da97555a-5f26-4666-b1c9-c91b6dc779e0",
          "targetHandle": "input",
          "data": {
            "startColor": "#56A6DC",
            "stopColor": "#D770AD"
          },
          "selected": false,
          "dragging": false,
          "__class__": "Edge"
        },
        {
          "id": "reactflow__edge-a1305ebc-5cff-4ea2-a1e2-e38cf3aa8f31output-c914dea6-f95b-4039-8da7-4ef0ea1e94b5input",
          "source": "a1305ebc-5cff-4ea2-a1e2-e38cf3aa8f31",
          "sourceHandle": "output",
          "target": "c914dea6-f95b-4039-8da7-4ef0ea1e94b5",
          "targetHandle": "input",
          "data": {
            "startColor": "#F8637A",
            "stopColor": "#56A6DC"
          },
          "selected": false,
          "dragging": false,
          "__class__": "Edge"
        },
        {
          "id": "reactflow__edge-da97555a-5f26-4666-b1c9-c91b6dc779e0output-b6387c05-c806-47a2-aa8d-05965b611ceapredict",
          "source": "da97555a-5f26-4666-b1c9-c91b6dc779e0",
          "sourceHandle": "output",
          "target": "b6387c05-c806-47a2-aa8d-05965b611cea",
          "targetHandle": "predict",
          "data": {
            "startColor": "#D770AD",
            "stopColor": "#888"
          },
          "selected": false,
          "dragging": false,
          "__class__": "Edge"
        },
        {
          "id": "reactflow__edge-b6387c05-c806-47a2-aa8d-05965b611ceapredict-9d5e48fc-b0f4-4aed-91e3-31324b2e3296input",
          "source": "b6387c05-c806-47a2-aa8d-05965b611cea",
          "sourceHandle": "predict",
          "target": "9d5e48fc-b0f4-4aed-91e3-31324b2e3296",
          "targetHandle": "input",
          "data": {
            "startColor": "#888",
            "stopColor": "#56A6DC"
          },
          "selected": false,
          "dragging": false,
          "__class__": "Edge"
        }
      ],
      "__class__": "Graph"
    }
  },
  "open": [
    "main"
  ],
  "active": "main",
  "version": "1.0.0",
  "__class__": "Project"
}